plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '7.0.2'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asciidoctorExt
}

configurations.create("mockitoAgent")

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	mockitoAgent("org.mockito:mockito-core") {
		transitive = false
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	jvmArgs "-javaagent:${configurations.mockitoAgent.asPath}"
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named('bootJar') {
	dependsOn asciidoctor

	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}


spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}

	format 'yaml', {
		target '**/*.yml', '**/*.yaml'

		trimTrailingWhitespace()
		leadingTabsToSpaces(2)
		endWithNewline()
	}

	java {
		palantirJavaFormat()
	}
}
